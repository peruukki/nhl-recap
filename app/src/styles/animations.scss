@use 'sass:math';

$animation-speed: var(--animation-speed, 1);

$fade-duration: calc($animation-speed * 0.6s);
$fade-duration-fast: calc($animation-speed * 0.3s);
$fade-duration-slow: calc($animation-speed * 1s);
$expand-duration: calc($animation-speed * 0.45s);
$focus-duration-enter: calc($animation-speed * 0.45s);
$focus-duration-exit: calc($animation-speed * 1s);
$height-duration: calc($animation-speed * 0.45s);
$hover-duration: calc($animation-speed * 0.25s);

$delay-small: calc($animation-speed * 0.3s);
$delay-large: calc($animation-speed * 0.45s);

// The base and stagger delays are used as components in calculations, so we don't apply $animation
// on them directly, but on the calculated values
$expand-delay-base: 0.05s;
$expand-delay-stagger: 0.2s;

$expand-delay-last: calc($animation-speed * 1s);

$fade-timing-function: ease-out;
$expand-timing-function: cubic-bezier(0.53, 0.01, 0.6, 1.23);
$focus-timing-function: cubic-bezier(0.14, 0.97, 0.29, 0.97);
$height-timing-function: $focus-timing-function;
$hover-timing-function: ease-out;

.fade-in {
  animation: $fade-duration $fade-timing-function fade-in;
}
.fade-in-fast {
  animation: $fade-duration-fast $fade-timing-function fade-in-fast;
}
.fade-in-slow {
  animation: $fade-duration-slow $fade-timing-function fade-in;
}

@mixin fade-in-with-slide-animation {
  animation:
    $fade-duration fade-in,
    $fade-duration-fast slide-down;
}

// Need two separate animation names to re-trigger animation
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes fade-in-fast {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

// From https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Cubic_B%C3%A9zier_curves
@function cubic-bezier-to-func-of-t($p0, $p1, $p2, $p3, $t) {
  @return (
    math.pow(1 - $t, 3) * $p0 + (3 * math.pow(1 - $t, 2) * $t * $p1) +
      (3 * (1 - $t) * math.pow($t, 2) * $p2) + math.pow($t, 3) * $p3
  );
}

.expand {
  // Max number of games is 16
  @for $i from 0 through 15 {
    &--#{$i} {
      // easeOutCubic for delay
      $delay: calc(
        $animation-speed *
          (
            $expand-delay-base +
              cubic-bezier-to-func-of-t(0.215, 0.61, 0.355, 1, math.div($i, 15)) *
              $expand-delay-stagger
          )
      );

      animation:
        $delay hidden,
        $expand-duration $expand-timing-function expand $delay,
        $fade-duration-fast ease-in fade-in $delay;

      @media (prefers-reduced-motion) {
        animation:
          $delay hidden,
          $fade-duration-fast ease-in fade-in $delay;
      }
    }
  }
}

.expand--last {
  $delay: $expand-delay-last;

  animation:
    $delay hidden,
    $expand-duration $expand-timing-function expand $delay,
    $fade-duration-fast ease-in fade-in $delay;

  @media (prefers-reduced-motion) {
    animation:
      $delay hidden,
      $fade-duration-fast ease-in fade-in $delay;
  }
}

@keyframes expand {
  from {
    transform: scale(0);
  }
  to {
    transform: scale(1);
  }
}

@keyframes slide-down {
  from {
    transform: translateY(-0.25rem);
  }
  to {
    transform: translateY(0);
  }
}

@keyframes hidden {
  from {
    opacity: 0;
  }
  to {
    opacity: 0;
  }
}

@mixin delayed-animation {
  animation-fill-mode: both;
  animation-delay: $delay-small;
}
@mixin delayed-animation-later {
  animation-fill-mode: both;
  animation-delay: $delay-large;
}

// Adapted from https://github.com/erictreacy/mimic.css/blob/master/mimic.css
@keyframes nope {
  0% {
    transform: translateX(0);
  }

  6.5% {
    transform: translateX(-4px) rotateY(-10deg);
  }

  18.5% {
    transform: translateX(3px) rotateY(8deg);
  }

  31.5% {
    transform: translateX(-2px) rotateY(-6deg);
  }

  43.5% {
    transform: translateX(1px) rotateY(4deg);
  }

  50% {
    transform: translateX(0);
  }
}

.nope-animation {
  @media (prefers-reduced-motion: no-preference) {
    animation-name: nope;
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: both;
  }
}

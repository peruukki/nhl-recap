@use 'sass:math';

$fade-duration: 1s;
$expand-duration: 0.45s;
$focus-duration: 0.25s;
$height-duration: 0.25s;

$expand-timing-function: cubic-bezier(0.53, 0.01, 0.6, 1.23);
$focus-timing-function: ease-out;
$height-timing-function: ease-in-out;

.fade-in {
  animation: $fade-duration fade-in;
}
.fade-in-fast {
  animation: ($fade-duration * 0.5) fade-in-fast;
}
.fade-in-slow {
  animation: ($fade-duration * 2) fade-in;
}

// Need two separate animation names to re-trigger animation
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes fade-in-fast {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

// From https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Cubic_B%C3%A9zier_curves
@function cubic-bezier-to-func-of-t($p0, $p1, $p2, $p3, $t) {
  @return (
    math.pow(1 - $t, 3) * $p0 + (3 * math.pow(1 - $t, 2) * $t * $p1) +
      (3 * (1 - $t) * math.pow($t, 2) * $p2) + math.pow($t, 3) * $p3
  );
}

.expand {
  // Max number of games is 16
  @for $i from 0 through 15 {
    &--#{$i} {
      // easeOutCubic for delay
      $delay: 50ms + cubic-bezier-to-func-of-t(0.215, 0.61, 0.355, 1, math.div($i, 15)) * 500ms;
      animation: $delay hidden, $expand-duration $expand-timing-function expand $delay,
        ($fade-duration * 0.5) ease-in fade-in $delay;
      will-change: opacity, transform;

      @media (prefers-reduced-motion) {
        animation: $delay hidden, ($fade-duration * 0.5) ease-in fade-in $delay;
        will-change: opacity;
      }
    }
  }
}

.expand--last {
  $delay: 1000ms;
  animation: $delay hidden, $expand-duration $expand-timing-function expand $delay,
    ($fade-duration * 0.5) ease-in fade-in $delay;

  @media (prefers-reduced-motion) {
    animation: $delay hidden, ($fade-duration * 0.5) ease-in fade-in $delay;
  }
}

@keyframes expand {
  from {
    transform: scale(0);
  }
  to {
    transform: scale(1);
  }
}

@keyframes hidden {
  from {
    opacity: 0;
  }
  to {
    opacity: 0;
  }
}

@mixin delayed-animation {
  animation-fill-mode: both;
  animation-delay: ($fade-duration * 0.25);
}

// Adapted from https://github.com/erictreacy/mimic.css/blob/master/mimic.css
@keyframes nope {
  0% {
    transform: translateX(0);
  }

  6.5% {
    transform: translateX(-4px) rotateY(-10deg);
  }

  18.5% {
    transform: translateX(3px) rotateY(8deg);
  }

  31.5% {
    transform: translateX(-2px) rotateY(-6deg);
  }

  43.5% {
    transform: translateX(1px) rotateY(4deg);
  }

  50% {
    transform: translateX(0);
  }
}

.nope-animation {
  animation-name: nope;
  animation-duration: 1s;
  animation-timing-function: ease-in-out;
  animation-fill-mode: both;
}
